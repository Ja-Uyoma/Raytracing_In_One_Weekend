// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef METAL_HPP
#define METAL_HPP

#include "Colour.hpp"
#include "Material.hpp"

namespace rt::material {

class Metal final : public Material
{
public:
  constexpr explicit Metal(colour::Colour const& albedo, double fuzz) noexcept
    : m_albedo(albedo), m_fuzz(fuzz < 1 ? fuzz : 1)
  {
  }

  /// Determine if an incidence ray is scattered when it hits a metallic material
  /// \param[in] rayIn The incidence ray
  /// \param[in] record A record of how the incidence ray interacted with the metallic surface
  /// \param[out] attenuation How much the reflected ray is attenuated, if scattered
  /// \param[out] scattered The reflected ray, which might be scattered
  /// \returns True if the incidence ray is scattered, and false otherwise
  bool scatter(ray::Ray const& rayIn, hittable::HitRecord const& record, colour::Colour& attenuation,
               ray::Ray& scattered) const noexcept override;

private:
  colour::Colour m_albedo {};
  double m_fuzz {};
};

}   // namespace rt::material

#endif
