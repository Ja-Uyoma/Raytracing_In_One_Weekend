// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "Colour.hpp"

#include <algorithm>

namespace rt::colour {

/// \brief Map each individual colour component to the range [0, 255]
/// \param[in] colour The colour to be mapped to the specified range
/// \param[in] samplesPerPixel The number of samples of each pixel
/// \returns A new colour whose colour components lie within the [0, 255] range
[[nodiscard]] Colour mapToByteRange(Colour const& colour, int samplesPerPixel) noexcept
{
  auto const scale = 1.0 / samplesPerPixel;

  // Divide each colour by the number of samples

  auto const r = std::sqrt(colour.r() * scale);
  auto const g = std::sqrt(colour.g() * scale);
  auto const b = std::sqrt(colour.b() * scale);

  return Colour(static_cast<int>(256 * std::clamp(r, 0.0, 0.999)), static_cast<int>(256 * std::clamp(g, 0.0, 0.999)),
                static_cast<int>(256 * std::clamp(b, 0.0, 0.999)));
}

/// @brief Write the value of each colour component to the given output stream
/// @param[inout] out The output stream to write to
/// @param[in] pixelColour The colour of a single pixel in RGB format
/// @details You should call mapToByteRange before calling this function
void writeColour(std::ostream& out, Colour const& pixelColour) noexcept
{
  out << pixelColour.r() << ' ' << pixelColour.g() << ' ' << pixelColour.b() << '\n';
}

}   // namespace rt::colour
