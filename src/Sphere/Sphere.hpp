// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef SPHERE_HPP
#define SPHERE_HPP

#include "Hittable.hpp"
#include "Material.hpp"
#include "Ray.hpp"
#include <memory>

namespace rt::sphere {

class Sphere final : public hittable::Hittable
{
public:
  /// Create a default Sphere instance
  constexpr explicit Sphere() noexcept = default;

  /// Create a Sphere instance with the specified centre, radius, and material
  /// \param[in] centre The centre of the sphere
  /// \param[in] radius The radius of the sphere
  /// \param[in] material The material the sphere is made of
  explicit Sphere(ray::Point3 const& centre, double radius, material::Material* material) noexcept;

  bool hit(ray::Ray const& ray, double tMin, double tMax, hittable::HitRecord& record) const noexcept override;

private:
  ray::Point3 m_centre {};
  double m_radius {};
  std::unique_ptr<material::Material> m_materialPtr;
};

}   // namespace rt::sphere

#endif
