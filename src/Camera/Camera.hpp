// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef CAMERA_HPP
#define CAMERA_HPP

#include "Ray.hpp"
#include "Utilities.hpp"
#include "Vec3.hpp"
#include <cmath>

namespace rt::camera {

class Camera
{
public:
  /// Create a Camera instance with the given parameters
  /// \param[in] lookFrom The point where the camera is at
  /// \param[in] lookAt The point the camera is facing
  /// \param[in] viewUp The sideways tilt of the camera
  /// \param[in] verticalFieldOfView The angle you see through the portal
  /// \param[in] aspectRatio The aspect ratio of the camera
  constexpr explicit Camera(ray::Point3 const& lookFrom, ray::Point3 const& lookAt, vec3::Vec3 const& viewUp,
                            double verticalFieldOfView, double aspectRatio) noexcept
    : m_origin(lookFrom)
  {
    auto const theta = degreesToRadians(verticalFieldOfView);
    auto const h = std::tan(theta / 2);
    auto const viewportHeight = 2.0 * h;
    auto const viewportWidth = aspectRatio * viewportHeight;

    auto const w = vec3::getUnitVector(lookFrom - lookAt);
    auto const u = vec3::getUnitVector(vec3::getCrossProduct(viewUp, w));
    auto const v = vec3::getCrossProduct(w, u);

    m_horizontal = viewportWidth * u;
    m_vertical = viewportHeight * v;
    m_lowerLeftCorner = m_origin - (m_horizontal / 2) - (m_vertical / 2) - w;
  }

  /// Create a ray travelling from the camera to the scene
  /// \param[in] u Horizontal offset vector used to move the ray across the scene
  /// \param[in] v Vertical offset vector used to move the ray along the scene
  /// \returns A ray from the camera to the scene
  constexpr ray::Ray getRay(double u, double v) const noexcept
  {
    return ray::Ray(m_origin, m_lowerLeftCorner + (u * m_horizontal) + (v * m_vertical) - m_origin);
  }

private:
  ray::Point3 m_origin {0, 0, 0};
  ray::Point3 m_lowerLeftCorner {};
  vec3::Vec3 m_horizontal {};
  vec3::Vec3 m_vertical {};
};

}   // namespace rt::camera

#endif
