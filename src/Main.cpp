// Boost Software License - Version 1.0 - August 17th, 2003

// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:

// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "Colour/Colour.hpp"
#include "Ray.hpp"
#include "Vec3.hpp"

#include <cstddef>
#include <iostream>

namespace rt {
struct Image {
  std::size_t width;
  std::size_t height;
};

/// \brief Produce a linear blend of white and blue colours
/// \param[in] ray The ray whose colour is to be computed
/// \returns A linear blend of white and blue colours
colour::Colour rayColour(ray::Ray const &ray) noexcept {
  // Get the ray direction and scale it to unit length (so -1.0 < y < 1.0)
  // Because we're using the y height after normalizing the vector, there'll be
  // a horizontal gradient to the colour in addition to the vertical gradient
  auto const unitDirection = vec3::getUnitVector(ray.getDirection());

  // Take the y height and scale it to the range 0.0 <= t <= 1.0
  auto const t = 0.5 * (unitDirection.y() + 1.0);

  // When t = 1.0, we'll have the colour blue
  // When t = 0.0, we'll have the colour white
  // In between, we'll have a blend of colours
  // This produces a linear interpolation of the start and end colours
  constexpr auto start = colour::Colour(1.0, 1.0, 1.0);
  constexpr auto end = colour::Colour(0.5, 0.7, 1.0);

  return (1.0 - t) * start + t * end;
}

/// @brief Render a 256 px by 256 px PPM image
void renderImage() {
  constexpr Image img{.width = 256, .height = 256};

  std::cout << "P3\n" << img.width << ' ' << img.height << "\n255\n";

  for (std::size_t j = img.height - 1; j < img.height; --j) {
    std::clog << "\rScanlines remaining: " << j << '\n' << std::flush;

    for (std::size_t i = 0; i < img.width; ++i) {
      auto pixelColour =
          colour::Colour(static_cast<double>(i) / (img.width - 1),
                         static_cast<double>(j) / (img.height - 1), 0);

      auto const colour = colour::mapToByteRange(pixelColour);
      colour::writeColour(std::cout, colour);
    }
  }

  std::clog << "\rDone.            \n";
}
} // namespace rt